---
description: 
globs: 
---
# TaskDetail Component

## Purpose

The `TaskDetail` component displays detailed information about a specific task within the Soln.ai application. It fetches task data based on a `taskId` prop (passed from the route parameters) and presents the information in a user-friendly format. The component handles loading states, error states (including a "task not found" state), and provides a button to mark a task as completed (with associated loading and error handling for that action). It uses Shadcn UI components for a consistent and accessible UI.

## Location

`frontend/nextjs/src/components/TaskDetail/TaskDetail.tsx`

## Props

| Prop Name | Type   | Description                                   | Required | Default Value |
| :-------- | :----- | :-------------------------------------------- | :------- | :------------ |
| `taskId`  | string | The unique identifier of the task to display. | Yes      | N/A           |

## State Management

The component utilizes the Zustand store (`@/lib/store.ts`) for managing its primary state and data fetching. It accesses:

*   **`task`:** The `Task` object representing the currently displayed task. This will be `null` if the task is loading, not found, or if there's an error.
*   **`fetchTask(taskId: string): Promise<void>`:** An action function provided by the Zustand store to fetch a task by its ID.
*   **`isLoading`:** A `boolean` indicating whether the task data is currently being fetched.
*   **`error`:** A `string | null` containing an error message if an error occurred during the initial data fetch.

In addition to the Zustand store, the component uses *local* state for managing the loading and error states *specifically related to the "Mark as Completed" action*:

*   **`completeLoading`:** `boolean` - Indicates whether the "Mark as Completed" action is in progress.
*   **`completeError`:** `string | null` - Stores any error message related to the "Mark as Completed" action.

## Data Fetching

The component fetches task data when it mounts (or when the `taskId` prop changes) using the `fetchTask(taskId)` action from the Zustand store. This action, in turn, calls the `apiClient.getTask(id)` function.

## Real-time Updates
The component is ready to handle real time updates with a websocket connection.

## Error Handling

The component handles several error scenarios:

*   **Initial Fetch Error:** If the `fetchTask` action fails (e.g., network error, API error), the `error` state from the Zustand store is used to display a general error message.
*   **Task Not Found:** If the `fetchTask` action succeeds, but no task with the given `taskId` is found, a "Task Not Found" message is displayed.
*   **Completion Error:** If the `updateTaskStatus` API call (triggered by the "Mark as Completed" button) fails, the `completeError` state is updated, and an error message is displayed *above* the task details.

## UI Structure

The component uses Shadcn UI components to structure the UI:

*   **`Card`:** Provides the main container for the task details.
*   **`CardHeader`:** Contains the task description (as the title) and the task ID (as a description).
*   **`CardTitle`:** Displays the task description.
*   **`CardDescription`:** Displays the task ID.
*   **`Badge`:** Displays the task status (with different variants for "completed" and other statuses).
*   **`CardContent`:** Contains the main details of the task (crew ID, created/updated/completed timestamps).
*   **`CardFooter`:** Contains the "Back to Tasks" button and the "Mark as Completed" button (conditionally rendered).
*   **`Button`:** Used for the "Back to Tasks" and "Mark as Completed" buttons.
*   **`Skeleton`:** Used to display a loading skeleton while the task data is being fetched.
* **`Link`:** Used inside the Button to go back to the tasks.

## Usage Example

```typescript jsx
// In app/tasks/[id]/page.tsx
import TaskDetail from '@/components/TaskDetail';
import { Metadata } from 'next';

interface PageParams {
  params: {
    id: string;
  };
}

export default function TaskDetailPage({ params }: PageParams) {
  return (
    <main className="container mx-auto p-4">
      <TaskDetail taskId={params.id} />
    </main>
  );
}

export const metadata: Metadata = {
    title: 'Task Detail | Soln.ai',
    description: 'View task details',
};
```

## Styling

The component is styled using Tailwind CSS utility classes, provided through the Shadcn UI components.

## Dependencies

*   `react`: React library.
*   `@/lib/store`: Zustand store for state management.
*   `@/lib/apiClient`: API client for data fetching and updates.
*   `@/lib/types`: TypeScript type definitions.
*   `next/link`: Next.js Link component for navigation.
*   `@shadcn/ui`: Shadcn UI components (Badge, Button, Card, Skeleton).
*  `next/navigation`: Next js to get the params.

## Accessibility

*   **Semantic HTML:** Uses semantic HTML elements (e.g., `<div>`, `<p>`, `<h3>`, `<button>`, `<a>`).
*   **ARIA Attributes:**
    *   `role="status"`: Used for the loading state.
    *   `role="alert"`: Used for error messages.
    *   `aria-label`: Used on the "Mark as Completed" button.
    *   `aria-live`: Used on loading message.
*   **Keyboard Navigation:** The "Mark as Completed" button and the "Back to Tasks" link are focusable and operable with the keyboard.
* **Loading States:**  Uses skeleton loading indicators to provide feedback to the user while data is being fetched.
* **Error Messages:** Displays clear and concise error messages to the user.

## Task Completion

The "Mark as Completed" button triggers the following actions:

1.  **Loading State:** Sets `completeLoading` to `true` to disable the button and display "Completing...".
2.  **API Call:** Calls `apiClient.updateTaskStatus(task.id, 'completed')` to update the task's status on the backend.
3.  **Refetch:**  Calls `fetchTask(taskId)` to refetch the task data and update the UI.
4.  **Error Handling:**  If the API call fails, sets `completeError` with an error message.
5.  **Loading State Reset:**  Sets `completeLoading` to `false` in a `finally` block to re-enable the button.

The button is only displayed if the task is *not* already completed.

## Testing
Comprehensive test suite covering:
- Loading state rendering
- Error state handling
- Task not found state
- Task details display
- Conditional rendering of complete button
- Data fetching on mount

## Performance Considerations
- Uses skeleton loading for better perceived performance
- Efficient re-renders through proper state management
- Conditional rendering to prevent unnecessary DOM updates
- Optimized imports for better bundle size

## Security
- Validates taskId prop before data fetching
- Sanitizes displayed data
- Handles errors gracefully
- No sensitive data exposure in error messages

## Changelog
- v1.0.0: Initial implementation with Shadcn UI components
  - Added comprehensive task detail display
  - Implemented loading and error states
  - Added task completion functionality
  - Included accessibility features 