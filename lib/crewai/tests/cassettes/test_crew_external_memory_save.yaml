interactions:
- request:
    body: '{"input": ["Perform a search on specific topics."], "model": "text-embedding-3-small",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.9
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    content: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
      \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
      \   }\n  ],\n  \"model\": \"text-embedding-3-small\",\n  \"usage\": {\n    \"prompt_tokens\":
      7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 929ab3937d457e01-GRU
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 01 Apr 2025 20:05:28 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=kDn7w.xxhfUOdeywOX91X.QPh7jJ.MWIdK59RMswo4I-1743537928-1.0.1.1-fsXh4ayfrGxPX9d7yv7wOTJao.R7zWidYJkbOjSnLbNrs5DIziftd8U4EkvHFafefe4dS33kmwVZZvBBsSA0iTNy8kTCh4ouZCTCBGdqiJM;
        path=/; expires=Tue, 01-Apr-25 20:35:28 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=jlKaHr6Qf4Cpn7uR7FBiNw0lhnPCPxgSGLHX33FTNZY-1743537928631-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-model:
      - text-embedding-3-small
      openai-organization:
      - crewai-iuxna1
      openai-processing-ms:
      - '196'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-68459c4c98-rcmtr
      x-envoy-upstream-service-time:
      - '165'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999991'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_4e0afe109cad076a0738b5c0cf2d3325
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: '{"input": ["Perform a search on specific topics."], "model": "text-embedding-3-small",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.9
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    content: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
      \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
      \   }\n  ],\n  \"model\": \"text-embedding-3-small\",\n  \"usage\": {\n    \"prompt_tokens\":
      7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 929ab3965ba47dfb-GRU
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 01 Apr 2025 20:05:28 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=5_dVmaW1w6ShSd0cQsx_6UToMPBGZYGCn4AuQqRKApI-1743537928-1.0.1.1-YIeREsG1o9zTcT.Da4V5YgMnEFTLJSubxSv2Xcrby4js5WOWsqkwEmd0mTErAR4yN_tlR_lkbq6eyVvjW4Qr9qCtlB1sdZR9q9sKHTfQTLc;
        path=/; expires=Tue, 01-Apr-25 20:35:28 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=NCI5ttxt2Z4JzyWS0cwOIKu4mvXXODEDgwZ4n6e3Bw4-1743537928979-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-model:
      - text-embedding-3-small
      openai-organization:
      - crewai-iuxna1
      openai-processing-ms:
      - '103'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-779fc7d87c-zw8xf
      x-envoy-upstream-service-time:
      - '74'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999991'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_d5345faa4b8024f93e46c9695cff0375
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: !!binary |
      CtoMCiQKIgoMc2VydmljZS5uYW1lEhIKEGNyZXdBSS10ZWxlbWV0cnkSsQwKEgoQY3Jld2FpLnRl
      bGVtZXRyeRKXCAoQm8h3kcZlX+KG8GXz4BaguxIIpiZBM32xbrMqDENyZXcgQ3JlYXRlZDABOagr
      ERR8SjIYQdgDQBR8SjIYShsKDmNyZXdhaV92ZXJzaW9uEgkKBzAuMTA4LjBKGgoOcHl0aG9uX3Zl
      cnNpb24SCAoGMy4xMi45Si4KCGNyZXdfa2V5EiIKIDA3YTcxNzY4Y2M0YzkzZWFiM2IzMWUzYzhk
      MjgzMmM2SjEKB2NyZXdfaWQSJgokY2EyZDBlMmUtMDY3NS00Yjk3LTljNGItMjllN2UxMGY3YTE5
      ShwKDGNyZXdfcHJvY2VzcxIMCgpzZXF1ZW50aWFsShEKC2NyZXdfbWVtb3J5EgIQAUoaChRjcmV3
      X251bWJlcl9vZl90YXNrcxICGAFKGwoVY3Jld19udW1iZXJfb2ZfYWdlbnRzEgIYAUo6ChBjcmV3
      X2ZpbmdlcnByaW50EiYKJDVhYzNjN2JlLWMxZWUtNDRmYS1iMzEzLTVmMzRjODA3ZDAwYko7Chtj
      cmV3X2ZpbmdlcnByaW50X2NyZWF0ZWRfYXQSHAoaMjAyNS0wNC0wMVQxNzowNTowMS45OTIwODlK
      ywIKC2NyZXdfYWdlbnRzErsCCrgCW3sia2V5IjogIjAyZGYxM2UzNjcxMmFiZjUxZDIzOGZlZWJh
      YjFjYTI2IiwgImlkIjogIjJiZDZmZTY1LTRkYWItNDVhYy04ZTMxLTljNzU2NThlOTdiOCIsICJy
      b2xlIjogIlJlc2VhcmNoZXIiLCAidmVyYm9zZT8iOiB0cnVlLCAibWF4X2l0ZXIiOiAyNSwgIm1h
      eF9ycG0iOiBudWxsLCAiZnVuY3Rpb25fY2FsbGluZ19sbG0iOiAiIiwgImxsbSI6ICJncHQtNG8i
      LCAiZGVsZWdhdGlvbl9lbmFibGVkPyI6IGZhbHNlLCAiYWxsb3dfY29kZV9leGVjdXRpb24/Ijog
      ZmFsc2UsICJtYXhfcmV0cnlfbGltaXQiOiAyLCAidG9vbHNfbmFtZXMiOiBbXX1dSv8BCgpjcmV3
      X3Rhc2tzEvABCu0BW3sia2V5IjogIjdiNDJkZjNjM2M3NGMyMWM4OTQ4MGUwYzA3MDUzODVmIiwg
      ImlkIjogIjcwMTEzZTAwLWRlN2EtNGY0Ny1iZTBmLTU2ZWE1YmFhYTA4MiIsICJhc3luY19leGVj
      dXRpb24/IjogZmFsc2UsICJodW1hbl9pbnB1dD8iOiBmYWxzZSwgImFnZW50X3JvbGUiOiAiUmVz
      ZWFyY2hlciIsICJhZ2VudF9rZXkiOiAiMDJkZjEzZTM2NzEyYWJmNTFkMjM4ZmVlYmFiMWNhMjYi
      LCAidG9vbHNfbmFtZXMiOiBbXX1degIYAYUBAAEAABKABAoQUIi202VgKCuffOL3MDckcxIIvGhx
      5lv94IYqDFRhc2sgQ3JlYXRlZDABOVDbgRR8SjIYQWjLgxR8SjIYSi4KCGNyZXdfa2V5EiIKIDA3
      YTcxNzY4Y2M0YzkzZWFiM2IzMWUzYzhkMjgzMmM2SjEKB2NyZXdfaWQSJgokY2EyZDBlMmUtMDY3
      NS00Yjk3LTljNGItMjllN2UxMGY3YTE5Si4KCHRhc2tfa2V5EiIKIDdiNDJkZjNjM2M3NGMyMWM4
      OTQ4MGUwYzA3MDUzODVmSjEKB3Rhc2tfaWQSJgokNzAxMTNlMDAtZGU3YS00ZjQ3LWJlMGYtNTZl
      YTViYWFhMDgySjoKEGNyZXdfZmluZ2VycHJpbnQSJgokNWFjM2M3YmUtYzFlZS00NGZhLWIzMTMt
      NWYzNGM4MDdkMDBiSjoKEHRhc2tfZmluZ2VycHJpbnQSJgokZTFiNGYwNTUtNTI4Ny00YmQ1LWJh
      YzUtOGE0MjQ2M2I0OTRmSjsKG3Rhc2tfZmluZ2VycHJpbnRfY3JlYXRlZF9hdBIcChoyMDI1LTA0
      LTAxVDE3OjA1OjAxLjk5MTM1NEo7ChFhZ2VudF9maW5nZXJwcmludBImCiRiM2M0ODhkOC1kOTEz
      LTQ0ZTEtYWE4NC05ZWRlMmY4ZmQ1N2V6AhgBhQEAAQAA
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1629'
      Content-Type:
      - application/x-protobuf
      User-Agent:
      - OTel-OTLP-Exporter-Python/1.31.1
    method: POST
    uri: https://telemetry.crewai.com:4319/v1/traces
  response:
    body:
      string: "\n\0"
    headers:
      Content-Length:
      - '2'
      Content-Type:
      - application/x-protobuf
      Date:
      - Tue, 01 Apr 2025 20:05:29 GMT
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Researcher. You are
      a researcher at a leading tech think tank.\nYour personal goal is: Search relevant
      data and provide results\nTo give my best complete final answer to the task
      respond using the exact following format:\n\nThought: I now can give a great
      answer\nFinal Answer: Your final answer must be the great and the most complete
      as possible, it must be outcome described.\n\nI MUST use these formats, my job
      depends on it!"}, {"role": "user", "content": "\nCurrent Task: Perform a search
      on specific topics.\n\nThis is the expected criteria for your final answer:
      A list of relevant URLs based on the search query.\nyou MUST return the actual
      complete content as the final answer, not a summary.\n\n# Useful context: \nExternal
      memories:\n\n\nBegin! This is VERY important to you, use the tools available
      and give your best Final Answer, your job depends on it!\n\nThought:"}], "model":
      "gpt-4o", "stop": ["\nObservation:"]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '984'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.68.2
      x-stainless-raw-response:
      - 'true'
      x-stainless-read-timeout:
      - '600.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    content: "{\n  \"id\": \"chatcmpl-BHc9RXfB5Sj2QaKl5AVUIW2X08Lfc\",\n  \"object\":
      \"chat.completion\",\n  \"created\": 1743537929,\n  \"model\": \"gpt-4o-2024-08-06\",\n
      \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
      \"assistant\",\n        \"content\": \"Thought: I now can give a great answer\\nFinal
      Answer: I am unable to access external websites directly to extract URLs or
      search the internet; however, I can guide you on how to search for the required
      topics using search engines like Google. You would typically input your specific
      query into the search engine to receive a list of URLs and content related to
      your topic. Here\u2019s a step-by-step approach:\\n\\n1. Go to a search engine
      like Google.\\n2. Enter your specific search query in the search bar.\\n3. Review
      the search results and identify URLs that are relevant to your topic.\\n4. Click
      on the links to access the actual content from those URLs.\\n\\nRemember to
      use specific keywords and phrases that are closely related to your research
      topic to narrow down your search results for more relevant URLs.\",\n        \"refusal\":
      null,\n        \"annotations\": []\n      },\n      \"logprobs\": null,\n      \"finish_reason\":
      \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 185,\n    \"completion_tokens\":
      161,\n    \"total_tokens\": 346,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
      0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\": {\n
      \     \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
      0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
      \"default\",\n  \"system_fingerprint\": \"fp_898ac29719\"\n}\n"
    headers:
      CF-RAY:
      - 929ab399fe8d7dee-GRU
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 01 Apr 2025 20:05:31 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Hxm6ignpjzUPY4_F0hNOxDI6blf0OOBnlpX09HJLkXw-1743537931-1.0.1.1-EnMojyC4HcsGaIfLZ3AM11JeKT5P2fCrPy4P_cEuqem7t6aJ66exdhSjbXn7cY_0WGDzFZMXOd2FiX1cdOOotV7bTaiKamm_kbxZ2AeH0DI;
        path=/; expires=Tue, 01-Apr-25 20:35:31 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=0tT0dhP6be3yJlOYI.zGaiYhO_s63uZ7L9h2mjFuTUI-1743537931401-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - crewai-iuxna1
      openai-processing-ms:
      - '1966'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999788'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_868c5ea7787c0215cc80eb9106f87605
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: '{"input": ["Thought: I now can give a great answer Final Answer: I am unable
      to access external websites directly to extract URLs or search the internet;
      however, I can guide you on how to search for the required topics using search
      engines like Google. You would typically input your specific query into the
      search engine to receive a list of URLs and content related to your topic. Here\u2019s
      a step-by-step approach:  1. Go to a search engine like Google. 2. Enter your
      specific search query in the search bar. 3. Review the search results and identify
      URLs that are relevant to your topic. 4. Click on the links to access the actual
      content from those URLs.  Remember to use specific keywords and phrases that
      are closely related to your research topic to narrow down your search results
      for more relevant URLs."], "model": "text-embedding-3-small", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '883'
      content-type:
      - application/json
      cookie:
      - __cf_bm=kDn7w.xxhfUOdeywOX91X.QPh7jJ.MWIdK59RMswo4I-1743537928-1.0.1.1-fsXh4ayfrGxPX9d7yv7wOTJao.R7zWidYJkbOjSnLbNrs5DIziftd8U4EkvHFafefe4dS33kmwVZZvBBsSA0iTNy8kTCh4ouZCTCBGdqiJM;
        _cfuvid=jlKaHr6Qf4Cpn7uR7FBiNw0lhnPCPxgSGLHX33FTNZY-1743537928631-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.9
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    content: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
      \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
      \   }\n  ],\n  \"model\": \"text-embedding-3-small\",\n  \"usage\": {\n    \"prompt_tokens\":
      165,\n    \"total_tokens\": 165\n  }\n}\n"
    headers:
      CF-RAY:
      - 929ab3a78f7f7e01-GRU
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 01 Apr 2025 20:05:31 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-model:
      - text-embedding-3-small
      openai-organization:
      - crewai-iuxna1
      openai-processing-ms:
      - '304'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-7c6fb6444f-lqx4h
      x-envoy-upstream-service-time:
      - '224'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999800'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_19ca925c719a9aa87da5ac6e9daf0f40
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: '{"messages": [{"role": "user", "content": "Assess the quality of the task
      completed based on the description, expected output, and actual results.\n\nTask
      Description:\nPerform a search on specific topics.\n\nExpected Output:\nA list
      of relevant URLs based on the search query.\n\nActual Output:\nThought: I now
      can give a great answer\nFinal Answer: I am unable to access external websites
      directly to extract URLs or search the internet; however, I can guide you on
      how to search for the required topics using search engines like Google. You
      would typically input your specific query into the search engine to receive
      a list of URLs and content related to your topic. Here\u2019s a step-by-step
      approach:\n\n1. Go to a search engine like Google.\n2. Enter your specific search
      query in the search bar.\n3. Review the search results and identify URLs that
      are relevant to your topic.\n4. Click on the links to access the actual content
      from those URLs.\n\nRemember to use specific keywords and phrases that are closely
      related to your research topic to narrow down your search results for more relevant
      URLs.\n\nPlease provide:\n- Bullet points suggestions to improve future similar
      tasks\n- A score from 0 to 10 evaluating on completion, quality, and overall
      performance- Entities extracted from the task output, if any, their type, description,
      and relationships"}], "model": "gpt-4o", "tool_choice": {"type": "function",
      "function": {"name": "TaskEvaluation"}}, "tools": [{"type": "function", "function":
      {"name": "TaskEvaluation", "description": "Correctly extracted `TaskEvaluation`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Entity": {"properties": {"name": {"description": "The name of the entity.",
      "title": "Name", "type": "string"}, "type": {"description": "The type of the
      entity.", "title": "Type", "type": "string"}, "description": {"description":
      "Description of the entity.", "title": "Description", "type": "string"}, "relationships":
      {"description": "Relationships of the entity.", "items": {"type": "string"},
      "title": "Relationships", "type": "array"}}, "required": ["name", "type", "description",
      "relationships"], "title": "Entity", "type": "object"}}, "properties": {"suggestions":
      {"description": "Suggestions to improve future similar tasks.", "items": {"type":
      "string"}, "title": "Suggestions", "type": "array"}, "quality": {"description":
      "A score from 0 to 10 evaluating on completion, quality, and overall performance,
      all taking into account the task description, expected output, and the result
      of the task.", "title": "Quality", "type": "number"}, "entities": {"description":
      "Entities extracted from the task output.", "items": {"$ref": "#/$defs/Entity"},
      "title": "Entities", "type": "array"}}, "required": ["entities", "quality",
      "suggestions"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2840'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Hxm6ignpjzUPY4_F0hNOxDI6blf0OOBnlpX09HJLkXw-1743537931-1.0.1.1-EnMojyC4HcsGaIfLZ3AM11JeKT5P2fCrPy4P_cEuqem7t6aJ66exdhSjbXn7cY_0WGDzFZMXOd2FiX1cdOOotV7bTaiKamm_kbxZ2AeH0DI;
        _cfuvid=0tT0dhP6be3yJlOYI.zGaiYhO_s63uZ7L9h2mjFuTUI-1743537931401-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.68.2
      x-stainless-raw-response:
      - 'true'
      x-stainless-read-timeout:
      - '600.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    content: "{\n  \"id\": \"chatcmpl-BHc9UaTUKHm9gIb6VtuzFmJ3Iyr5x\",\n  \"object\":
      \"chat.completion\",\n  \"created\": 1743537932,\n  \"model\": \"gpt-4o-2024-08-06\",\n
      \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
      \"assistant\",\n        \"content\": null,\n        \"tool_calls\": [\n          {\n
      \           \"id\": \"call_AB2zpwuaUHg5nDz8O27x9EGw\",\n            \"type\":
      \"function\",\n            \"function\": {\n              \"name\": \"TaskEvaluation\",\n
      \             \"arguments\": \"{\\\"suggestions\\\":[\\\"Ensure that the system
      has the capability to access external websites or clarify such limitations in
      the task description.\\\",\\\"Consider using web scraping tools or APIs to fetch
      URLs directly if direct access is not possible.\\\",\\\"If the task only involves
      providing guidance, make sure to adjust the expectations to match the output
      type.\\\",\\\"Provide a clear and realistic expected output based on the known
      capabilities of the system.\\\"],\\\"quality\\\":3,\\\"entities\\\":[]}\"\n
      \           }\n          }\n        ],\n        \"refusal\": null,\n        \"annotations\":
      []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
      \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 443,\n    \"completion_tokens\":
      87,\n    \"total_tokens\": 530,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
      0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\": {\n
      \     \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
      0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
      \"default\",\n  \"system_fingerprint\": \"fp_898ac29719\"\n}\n"
    headers:
      CF-RAY:
      - 929ab3ab8cf37dee-GRU
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 01 Apr 2025 20:05:34 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - crewai-iuxna1
      openai-processing-ms:
      - '2114'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999672'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_0a3d97c857f26c689ef0840a21ad6dc3
    http_version: HTTP/1.1
    status_code: 200
version: 1
